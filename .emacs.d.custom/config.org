* Packages
** Install Packages
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (unless (package-installed-p 'spacemacs-theme)
    (package-refresh-contents)
    (package-install 'spacemacs-theme))

  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))

  (use-package evil
    :ensure t
    :init
    (evil-mode 1))

  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)


  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char-timer))

  (use-package rainbow-identifiers
    :ensure t
    :init (rainbow-identifiers-mode))

  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))

  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda() (org-bullets-mode))))

  (use-package auto-complete
    :ensure t
    :init (auto-complete-mode 1))

  (use-package magit
    :ensure t
    :config (global-set-key (kbd "C-c m") 'magit-status))

  (use-package projectile
    :ensure t
    :pin "melpa-stable"
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package php-mode
    :ensure t)

  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package neotree
    :ensure t
    :bind ([f8] . 'neotree-toggle)
    :config
	(setq neo-smart-open t)
	(setq projectile-switch-project-action 'neotree-projectile-action)
	(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
	(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
	(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
	(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
	(evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
	(evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
	(evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
	(evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
	(evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
  )
#+END_SRC

* Tweaks
** Org
*** Tweaks
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Minor stuff
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (display-line-numbers-mode 1)
  (setq inhibit-startup-message t)
  (setq line-spacing 8)
  (setq make-backup-files nil)
  (global-prettify-symbols-mode t)
  (global-subword-mode 1)
  (show-paren-mode 1)
  
  (global-hl-line-mode 1)
  (set-face-background 'highlight "#2a2a2a")
  (set-face-foreground 'highlight nil)
  (set-face-underline-p 'highlight t)
#+END_SRC
** IDO
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Buffers
*** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
*** expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** Config reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
